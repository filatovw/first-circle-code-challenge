services:
  db:
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_DB: dwh
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/db/:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U appuser -d dwh
      interval: 10s
      timeout: 1s
      retries: 10

  db-migrate:
    image: liquibase/liquibase:4.32.0
    volumes:
      - ./migrations/changelog.xml:/liquibase/changelog.xml
      - ./migrations/ddl:/liquibase/ddl
      - ./migrations/seeds:/liquibase/seeds
    environment:
      LIQUIBASE_COMMAND_URL: jdbc:postgresql://db:5432/dwh
      LIQUIBASE_COMMAND_USERNAME: appuser
      LIQUIBASE_COMMAND_PASSWORD: apppass
    command: >
      --changeLogFile=changelog.xml
      update
    depends_on:
      db:
        condition: service_healthy
        restart: true

#  queue:
#    image: apache/kafka-native:3.9.0
#    restart: always
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_CFG_NODE_ID: 1
#      KAFKA_CFG_PROCESS_ROLES: broker,controller
#      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
#      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
#      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
#      ALLOW_PLAINTEXT_LISTENER: "yes"
#    ports:
#      - "9092:9092"
#
#  queue-init:
#    image: apache/kafka-native:3.9.0
#    depends_on:
#      - queue
#    entrypoint: ["/bin/sh", "-c"]
#    command: >
#      "
#      sleep 10 &&
#      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic transactions --replication-factor 1 --partitions 1 &&
#      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic failedTransactions --replication-factor 1 --partitions 1 &&
#      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic reports --replication-factor 1 --partitions 1
#      "
#
#  s3:
#    image: minio/minio:RELEASE.2025-03-12T18-04-18Z
#    restart: always
#    command: server /data --console-address ":9001"
#    environment:
#      MINIO_ROOT_USER: miniouser
#      MINIO_ROOT_PASSWORD: miniopass
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    volumes:
#      - ./volumes/minio/:/data
#
#   tx_stream_ingestor:
#     build: ./ingestion
#     depends_on:
#       - queue
#       - db
#     environment:
#       KAFKA_BROKER: kafka:9092
#       POSTGRES_HOST: db
#       POSTGRES_DB: dwh
#       POSTGRES_USER: appuser
#       POSTGRES_PASSWORD: apppass
# 
#   tx_csv_ingestor:
#     build: ./ingestion
#     depends_on:
#       - s3
#       - db
#     environment:
#       MINIO_ENDPOINT: http://minio:9000
#       MINIO_ACCESS_KEY: minioadmin
#       MINIO_SECRET_KEY: minioadmin123
#       POSTGRES_HOST: postgres
#       POSTGRES_DB: appdb
#       POSTGRES_USER: appuser
#       POSTGRES_PASSWORD: appsecret
# 
#   reporting_service:
#     build: ./services/reporting_service
#     container_name: reporting_service
#     depends_on:
#       - postgres
#       - minio
#     environment:
#       POSTGRES_HOST: postgres
#       POSTGRES_DB: appdb
#       POSTGRES_USER: appuser
#       POSTGRES_PASSWORD: appsecret
#       MINIO_ENDPOINT: http://minio:9000
#       MINIO_ACCESS_KEY: minioadmin
#       MINIO_SECRET_KEY: minioadmin123
